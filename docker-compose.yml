version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092, CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - net

  db:
    image: postgres
    restart: always
    volumes:
      - epcsd:/var/lib/postgresql/dbshow
    ports:
      - 54320:5432
    environment:
      POSTGRES_USER: epcsd
      POSTGRES_PASSWORD: epcsd
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${POSTGRES_DB:-epcsd}",
          "-U",
          "${POSTGRES_USER:-epcsd}"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - net

  db-admin:
    image: postgres
    restart: always
    volumes:
      - epcsd:/var/lib/postgresql/dbadmin
    ports:
      - 54321:5432
    environment:
      POSTGRES_USER: epcsd
      POSTGRES_PASSWORD: epcsd
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${POSTGRES_DB:-epcsd}",
          "-U",
          "${POSTGRES_USER:-epcsd}"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - net

  db-order:
    image: postgres
    restart: always
    volumes:
      - epcsd:/var/lib/postgresql/dborder
    ports:
      - 54322:5432
    environment:
      POSTGRES_USER: epcsd
      POSTGRES_PASSWORD: epcsd
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${POSTGRES_DB:-epcsd}",
          "-U",
          "${POSTGRES_USER:-epcsd}"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - net

  db-review:
    image: postgres
    restart: always
    volumes:
      - epcsd:/var/lib/postgresql/dbreview
    ports:
      - 54323:5432
    environment:
      POSTGRES_USER: epcsd
      POSTGRES_PASSWORD: epcsd
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${POSTGRES_DB:-epcsd}",
          "-U",
          "${POSTGRES_USER:-epcsd}"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - net

  adminer:
    image: adminer
    platform: linux/amd64
    restart: always
    ports:
      - 18080:8080
    networks:
      - net

  ms-showcatalog:
    build:
      context: ../cidh-ms-showcatalog
      dockerfile: Dockerfile
    ports:
      - "3001:18081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/epcsd
      - SPRING_DATASOURCE_USERNAME=epcsd
      - SPRING_DATASOURCE_PASSWORD=epcsd
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - net

  ms-administration:
    build:
      context: ../cidh-ms-administration
      dockerfile: Dockerfile
    ports:
      - "3002:18081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-admin:5432/epcsd
      - SPRING_DATASOURCE_USERNAME=epcsd
      - SPRING_DATASOURCE_PASSWORD=epcsd
    depends_on:
      db-admin:
        condition: service_healthy
    networks:
      - net

  ms-order:
    build:
      context: ../cidh-ms-order
      dockerfile: Dockerfile
    ports:
      - "3003:18081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-order:5432/epcsd
      - SPRING_DATASOURCE_USERNAME=epcsd
      - SPRING_DATASOURCE_PASSWORD=epcsd
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      db-order:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - net

  ms-review:
    build:
      context: ../cidh-ms-review
      dockerfile: Dockerfile
    ports:
      - "3004:18081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-review:5432/epcsd
      - SPRING_DATASOURCE_USERNAME=epcsd
      - SPRING_DATASOURCE_PASSWORD=epcsd
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    depends_on:
      db-review:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - net

  web:
    build:
      context: ../cidh-web
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ../cidh-monitoring/env/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - net
      
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    env_file:
      - ../cidh-monitoring/env/grafana.env
    networks:
      - net

volumes:
  epcsd:


networks:
  net:
